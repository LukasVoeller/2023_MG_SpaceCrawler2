[gd_scene load_steps=7 format=2]

[ext_resource path="res://src/addons/pixelplanets/Planets/Planet.tscn" type="PackedScene" id=1]
[ext_resource path="res://src/addons/pixelplanets/Planets/Moon/Moon.gd" type="Script" id=2]

[sub_resource type="Shader" id=1]
code = "// Just a test for now.
shader_type canvas_item;
render_mode blend_mix;

uniform float pixels : hint_range(10,100);
uniform float rotation : hint_range(0.0, 6.28) = 0.0;
uniform vec2 light_origin = vec2(0.39, 0.39);
uniform float time_speed : hint_range(0.0, 1.0) = 0.2;
uniform float dither_size : hint_range(0.0, 10.0) = 2.0;
uniform bool should_dither = true;

uniform float size = 50.0;
uniform int OCTAVES : hint_range(0, 20, 1);
uniform float seed: hint_range(1, 10);

uniform float time = 0.0;

uniform int n_colors = 8;
uniform sampler2D colorscheme;

float rand(vec2 coord) {
	// land has to be tiled (or the contintents on this planet have to be changing very fast)
	// tiling only works for integer values, thus the rounding
	// it would probably be better to only allow integer sizes
	// multiply by vec2(2,1) to simulate planet having another side
	coord = mod(coord, vec2(2.0,1.0)*round(size));
	return fract(sin(dot(coord.xy ,vec2(12.9898,78.233))) * 15.5453 * seed);
}

float noise(vec2 coord){
	vec2 i = floor(coord);
	vec2 f = fract(coord);
		
	float a = rand(i);
	float b = rand(i + vec2(1.0, 0.0));
	float c = rand(i + vec2(0.0, 1.0));
	float d = rand(i + vec2(1.0, 1.0));

	vec2 cubic = f * f * (3.0 - 2.0 * f);

	return mix(a, b, cubic.x) + (c - a) * cubic.y * (1.0 - cubic.x) + (d - b) * cubic.x * cubic.y;
}

float fbm(vec2 coord){
	float value = 0.0;
	float scale = 0.5;

	for(int i = 0; i < OCTAVES ; i++){
		value += noise(coord) * scale;
		coord *= 2.0;
		scale *= 0.5;
	}
	return value;
}

vec2 spherify(vec2 uv) {
	vec2 centered = uv *2.0-1.0;
	float z = sqrt(1.0 - dot(centered.xy, centered.xy));
//	float z = pow(1.0 - dot(centered.xy, centered.xy), 0.5);
	vec2 sphere = centered/(z + 1.0);
	
	return sphere * 0.5+0.5;
}

vec2 rotate(vec2 coord, float angle){
	coord -= 0.5;
	coord *= mat2(vec2(cos(angle),-sin(angle)),vec2(sin(angle),cos(angle)));
	return coord + 0.5;
}

bool dither(vec2 uv1, vec2 uv2) {
	return mod(uv1.x+uv2.y,2.0/pixels) <= 1.0 / pixels;
}

void fragment() {
	// pixelize uv
	vec2 uv = floor(UV*pixels)/pixels;
	
	bool dith = dither(uv, UV);
	// stepping over 0.5 instead of 0.49999 makes some pixels a little buggy
	float a = step(length(uv-vec2(0.5)), 0.49999);
	
	// map to sphere
	uv = spherify(uv);
	float d_light = distance(uv , light_origin);
	
	// give planet a tilt
	uv = rotate(uv, rotation);
	
	float equator_d = abs(uv.y - 0.5);
//	equator_d = pow(equator_d * 5.0, 1.0);
	
	
	vec2 fbm_uv = uv * size + vec2(time * time_speed, 0.0);
	float f = fbm(fbm_uv);
	f = f*f*6.0;
	float f2 = fbm(fbm_uv + f);
	
//	f2 = pow(f2, equator_d);
	f2 -= equator_d * 1.1;
//	f2 *= 1.4;
	f2 = pow(f2 * 2.4, 1.0);
	f2 -= d_light;
	if (dith) {
//		f2 *= 0.9;
	}
	f2 = clamp(f2, 0.0, 1.0);
	
	
	f2 = floor(f2 * 8.0) / 7.0;
	
	vec3 col = texture(colorscheme, vec2(1.0 - f2, 0.0)).rgb;
	
	COLOR = vec4(col, a);
	
}
"

[sub_resource type="Gradient" id=2]
offsets = PackedFloat32Array( 0, 0.143, 0.286, 0.429, 0.571, 0.714, 0.857, 1 )
colors = PackedColorArray( 0.968627, 0.952941, 0.717647, 1, 0.870588, 0.807843, 0.929412, 1, 0.54902, 0.470588, 0.647059, 1, 0.690196, 0.654902, 0.721569, 1, 0.952941, 0.658824, 0.2, 1, 0.913725, 0.521569, 0.215686, 1, 0.870588, 0.364706, 0.227451, 1, 0.67451, 0.156863, 0.278431, 1 )

[sub_resource type="GradientTexture2D" id=3]
gradient = SubResource( 2 )

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 1 )
shader_param/pixels = 100.0
shader_param/rotation = 5.93
shader_param/light_origin = Vector2( 0.439, 0.39 )
shader_param/time_speed = 0.2
shader_param/dither_size = 2.0
shader_param/should_dither = true
shader_param/size = 4.627
shader_param/OCTAVES = 6
shader_param/seed = 2.866
shader_param/time = 50.532
shader_param/n_colors = 8
shader_param/colorscheme = SubResource( 3 )

[node name="Moon" instance=ExtResource( 1 )]
script = ExtResource( 2 )

[node name="Moon" type="ColorRect" parent="." index="0"]
material = SubResource( 4 )
offset_right = 100.0
offset_bottom = 100.0
__meta__ = {
"_edit_use_anchors_": false
}
